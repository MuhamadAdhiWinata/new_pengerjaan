<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\File;
use Illuminate\Support\Str;

class NathgenRollback extends Command
{
    protected $signature = 'nathgen:rollback {name} {--force}';
    protected $description = 'Rollback REST API generated by nathgen:rest (delete model, migrations, resource, controllers, and injected routes)';

    public function handle()
    {
        $name = Str::studly($this->argument('name'));
        $nameLower = Str::lower($name);
        $tableName = Str::snake(Str::pluralStudly($name));

        // confirm
        if (! $this->option('force')) {
            if (! $this->confirm("This will permanently delete generated files for '{$name}'. Continue?")) {
                $this->info('Aborted.');
                return 0;
            }
        }

        // create backup folder
        $backupBase = storage_path("nathgen_backups/{$name}_" . date('Ymd_His'));
        if (! File::exists($backupBase)) {
            File::makeDirectory($backupBase, 0755, true);
        }

        // 1) Model
        $modelPath = app_path("Models/{$name}.php");
        $this->backupAndDelete($modelPath, $backupBase . '/Models');

        // 2) Resource
        $resourcePath = app_path("Http/Resources/{$name}Resource.php");
        $this->backupAndDelete($resourcePath, $backupBase . '/Resources');

        // 3) Controllers folder (Api/{modelLower})
        $controllerDir = app_path("Http/Controllers/Api/{$nameLower}");
        if (File::exists($controllerDir)) {
            // backup whole dir
            $this->recursiveBackupDir($controllerDir, $backupBase . '/Controllers');
            File::deleteDirectory($controllerDir);
            $this->info("Deleted: Controllers directory {$controllerDir}");
        } else {
            $this->info("Controllers directory not found: {$controllerDir}");
        }

        // 4) Migrations (search conservative)
        $migrations = File::files(database_path('migrations'));
        $deletedMigration = false;
        foreach ($migrations as $m) {
            $fn = $m->getFilename();
            $lc = Str::lower($fn);

            // match "create_{table}_table" where table could be plural snake (preferred)
            if (Str::contains($lc, "create_{$tableName}_table") ||
                Str::contains($lc, "create_" . Str::snake($name) . "_table") ||
                Str::contains($lc, Str::snake($name))) {
                // make sure it's a migration file
                if (preg_match('/create_.*_table\.php$/', $fn)) {
                    $this->backupAndDelete($m->getPathname(), $backupBase . '/Migrations');
                    $deletedMigration = true;
                }
            }
        }
        if (! $deletedMigration) {
            $this->info('No matching migration found (checked migrations folder).');
        }

        // 5) Remove injected route block from routes/api.php
        $routeFile = base_path('routes/api.php');
        if (File::exists($routeFile)) {
            $routeContent = File::get($routeFile);

            // pattern: remove block starting with comment "// Auto-generated for {Name}" up to the next "});"
            $pattern = '/\s*\/\/ Auto-generated for ' . preg_quote($name, '/') . '[\s\S]*?\}\);\s*/m';
            $newContent = preg_replace($pattern, '', $routeContent, -1, $count);

            if ($count && $newContent !== null) {
                // backup original route file
                File::put($backupBase . '/routes_api.php.bak', $routeContent);
                File::put($routeFile, $newContent);
                $this->info("Removed: {$count} auto-generated route block(s) for {$name} in routes/api.php (backup created).");
            } else {
                $this->info("No auto-generated route block for {$name} found in routes/api.php.");
            }
        } else {
            $this->info('routes/api.php not found.');
        }

        $this->info("âœ… Rollback for {$name} completed. Backups at: {$backupBase}");
        return 0;
    }

    private function backupAndDelete(string $path, string $backupDir)
    {
        if (! File::exists($path)) {
            $this->info("Not found: {$path}");
            return;
        }

        if (! File::exists($backupDir)) {
            File::makeDirectory($backupDir, 0755, true);
        }

        $dest = $backupDir . '/' . basename($path);
        File::copy($path, $dest);
        File::delete($path);
        $this->info("Deleted: {$path} (backup: {$dest})");
    }

    private function recursiveBackupDir(string $dir, string $backupDir)
    {
        if (! File::exists($backupDir)) {
            File::makeDirectory($backupDir, 0755, true);
        }

        $files = File::allFiles($dir);
        foreach ($files as $f) {
            $rel = str_replace($dir . DIRECTORY_SEPARATOR, '', $f->getPathname());
            $target = $backupDir . '/' . $rel;
            $targetDir = dirname($target);
            if (! File::exists($targetDir)) {
                File::makeDirectory($targetDir, 0755, true);
            }
            File::copy($f->getPathname(), $target);
        }
    }
}
